from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import json
import os
from datetime import datetime, timedelta

TOKEN = '8016153276:AAFlRHH4jCBkgRPPIPka2SjxY_QGYI6ZPxg'
ADMIN_ID = 1065790644
CHANNEL_LINK = 'https://t.me/ne_kit_a_tatoo'
PORTFOLIO_LINK = 'https://t.me/c/2651916205/14'
USERS_FILE = 'users.json'
POINTS_FILE = 'points.json'

FAQS = {
    "faq_care": (
        "–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Ö–æ–¥—É: https://t.me/ne_kit_a_tatoo/15\n"
        "1. –ú–æ–π—Ç–µ —Ä—É–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞—Å–∞–Ω–∏–µ–º —Ç–∞—Ç—É\n2. –ú–∞–∑—å ‚Äî —Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ!\n"
        "3. –ù–µ —Å–¥–∏—Ä–∞–π—Ç–µ –∫–æ—Ä–∫–∏\n4. –ù–µ –ø–æ—Å–µ—â–∞–π—Ç–µ –±–∞–Ω—é, –±–∞—Å—Å–µ–π–Ω 10 –¥–Ω–µ–π –∏ —Ç.–¥."
    ),
    "faq_heal": (
        "–ó–∞–∂–∏–≤–ª–µ–Ω–∏–µ: –æ—Ç 10 –¥–æ 21 –¥–Ω—è. –í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ö–æ–¥–∞, –∑–æ–Ω—ã, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫–æ–∂–∏. "
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî https://t.me/ne_kit_a_tatoo/16"
    ),
    "faq_pain": (
        "–í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–µ—Å—Ç–∞ –∏ —Ç–≤–æ–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –†–µ–∞–ª—å–Ω–æ –ø–æ—Ç–µ—Ä–ø–µ—Ç—å –¥–∞–∂–µ –Ω–æ–≤–∏—á–∫–∞–º. –ï—Å—Ç—å –æ–±–µ–∑–±–æ–ª–∏–≤–∞–Ω–∏–µ."
    ),
    "faq_price": (
        "–¶–µ–Ω–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Ü–≤–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–∞–π—Å—ã ‚Äî https://t.me/ne_kit_a_tatoo/17"
    ),
    "faq_sport": (
        "–°–ø–æ—Ä—Ç, –±–∞–Ω—è, —Å–∞—É–Ω–∞ ‚Äî –Ω–µ —Ä–∞–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ç–∞—Ç—É! –õ—É—á—à–µ 2 –Ω–µ–¥–µ–ª–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—É—Ç: https://t.me/ne_kit_a_tatoo/18"
    ),
}

def start(update, context):
    user_id = str(update.effective_user.id)
    args = context.args if hasattr(context, "args") else []
    referrer_id = None

    if args:
        referrer_id = args[0]
        if user_id != referrer_id:
            # –ß–∏—Ç–∞–µ–º –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if os.path.exists(USERS_FILE):
                with open(USERS_FILE, 'r') as f:
                    users = json.load(f)
            else:
                users = {}

            # –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
            if referrer_id in users:
                if "referrals" not in users[referrer_id]:
                    users[referrer_id]["referrals"] = []
                if user_id not in users[referrer_id]["referrals"]:
                    users[referrer_id]["referrals"].append(user_id)
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∏ –≤ users.json
                    if "points" not in users[referrer_id]:
                        users[referrer_id]["points"] = 0
                    users[referrer_id]["points"] += 10

                    # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∏ –≤ points.json!
                    if os.path.exists(POINTS_FILE):
                        with open(POINTS_FILE, 'r') as f:
                            points_data = json.load(f)
                    else:
                        points_data = {}
                    ref_points = points_data.get(referrer_id, {"points": 0, "last_roll": "", "streak": 0})
                    ref_points["points"] += 10
                    points_data[referrer_id] = ref_points
                    with open(POINTS_FILE, 'w') as f:
                        json.dump(points_data, f)
                    with open(USERS_FILE, 'w') as f:
                        json.dump(users, f)
                    try:
                        context.bot.send_message(
                            chat_id=int(referrer_id),
                            text=f"üî• –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∞! +10 –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏."
                        )
                    except Exception:
                        pass

    keyboard = [
        [InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å", callback_data='book_session')],
        [InlineKeyboardButton("–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", url=PORTFOLIO_LINK)],
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question')],
        [InlineKeyboardButton("–û–±–æ –º–Ω–µ", callback_data='about_me')],
        [InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏ / –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data='dice_game')],
        [InlineKeyboardButton("FAQ", callback_data='faq')],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data='get_ref_link')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–∞ –ø—É—Ç–∏ –≤ –º–∏—Ä —Ç–∞—Ç—É, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞!\n\n"
            "‚Äî –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —ç—Å–∫–∏–∑—ã\n‚Äî –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É\n‚Äî –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ–∞–Ω—Å\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
    else:
        update.callback_query.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–∞ –ø—É—Ç–∏ –≤ –º–∏—Ä —Ç–∞—Ç—É, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞!\n\n"
            "‚Äî –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —ç—Å–∫–∏–∑—ã\n‚Äî –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É\n‚Äî –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ–∞–Ω—Å\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )

def button(update, context):
    query = update.callback_query
    user_id = str(query.from_user.id)
    today = datetime.now().date().isoformat()
    points_data = {}

    if os.path.exists(POINTS_FILE):
        with open(POINTS_FILE, "r") as f:
            try:
                points_data = json.load(f)
            except Exception:
                points_data = {}
    if isinstance(points_data.get(user_id), int):
        points_data[user_id] = {"points": points_data[user_id], "last_roll": "", "streak": 0}

    user_info = points_data.get(user_id, {"points": 0, "last_roll": "", "streak": 0})

    if query.data == 'ask_question':
        query.answer()
        query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ —Å—é–¥–∞. –Ø –ª–∏—á–Ω–æ –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

    elif query.data == 'about_me':
        query.answer()
        query.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç üëãüòä\n"
            "–¢—ã –∑–¥–µ—Å—å –Ω–µ —Å–ª—É—á–∞–π–Ω–æ ‚ú®\n"
            "–Ø –≤–æ–æ–±—â–µ –Ω–µ –≤–µ—Ä—é –≤ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ üîÆ\n\n"
            "–î–∞–≤–∞–π —è –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂—É –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚Äî\n"
            "–∞ —Ç—ã —Å–∞–º(–∞) —Ä–µ—à–∏—à—å, –æ—Å—Ç–∞—Ç—å—Å—è –∏–ª–∏ –Ω–µ—Ç üôå\n\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–∏—Ç–∞ üí¨\n"
            "–Ø –ª—é–±–ª—é —Å–ø–æ—Ä—Ç ü•ä, –¥–≤–∏–∂–µ–Ω–∏–µ üèÉ‚Äç‚ôÇÔ∏è –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É ‚è±Ô∏è\n"
            "–° –¥–µ—Ç—Å—Ç–≤–∞ –±—ã–ª –Ω–µ–ø–æ—Å–µ–¥–æ–π üòÖ\n\n"
            "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –¥—É–º–∞–ª –∫–µ–º –∂–µ —è —Ö–æ—á—É —Å—Ç–∞—Ç—å\n"
            "—É—á–∏–ª—Å—è –Ω–∞ –ø–æ–≤–∞—Ä–∞ üë®‚Äçüç≥, —Ä–∞–±–æ—Ç–∞–ª –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö üß≥\n"
            "–ü—Ä–æ–±–æ–≤–∞–ª, –∏—Å–∫–∞–ª, –æ—à–∏–±–∞–ª—Å—è ‚Äî\n"
            "–∏ –≤ –∏—Ç–æ–≥–µ –ø—Ä–∏—à—ë–ª –∫ —Ç–∞—Ç—É üñ§\n\n"
            "–ê –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —è –∫ —ç—Ç–æ–º—É –ø—Ä–∏—à—ë–ª? ü§´\n"
            "–≠—Ç–æ —É–∂–µ –Ω–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ üó£\n\n"
            "–í—ã–±–∏—Ä–∞–π —ç—Å–∫–∏–∑, –ø—Ä–∏—Ö–æ–¥–∏ –Ω–∞ —Å–µ–∞–Ω—Å ‚Äî –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É üéØ\n"
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–¥–æ —Å–ª—ã—à–∞—Ç—å –≤–∂–∏–≤—É—é üî•"
        )
    elif query.data == 'book_session':
        query.answer()
        context.user_data['booking'] = {}
        context.user_data['booking_step'] = 1
        query.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")    

    elif query.data == 'dice_game':
        query.answer()
        # –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        sent = query.message.reply_dice(emoji="üé≤")
        # –î–∞–ª—å—à–µ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
        class DummyMessage:
            def __init__(self, message, dice):
                self.from_user = message.from_user
                self.dice = dice
                self.reply_text = message.reply_text
        dummy_update = type('obj', (object,), {'message': 
    DummyMessage(query.message, sent.dice)})()
        handle_dice(dummy_update, context)
    elif query.data == 'faq':
        query.answer()
        faq_keyboard = [
            [InlineKeyboardButton("üß¥ –£—Ö–æ–¥ –∑–∞ —Ç–∞—Ç—É", callback_data='faq_care')],
            [InlineKeyboardButton("‚è≥ –°–∫–æ–ª—å–∫–æ –∑–∞–∂–∏–≤–∞–µ—Ç?", callback_data='faq_heal')],
            [InlineKeyboardButton("ü§ï –ë–æ–ª—å–Ω–æ –ª–∏?", callback_data='faq_pain')],
            [InlineKeyboardButton("üí∏ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?", callback_data='faq_price')],
            [InlineKeyboardButton("üèãÔ∏è –ö–æ–≥–¥–∞ —Å–ø–æ—Ä—Ç?", callback_data='faq_sport')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')],
            [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data='get_ref_link')],
            [InlineKeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å", callback_data='book_session')]
]
        query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:",
            reply_markup=InlineKeyboardMarkup(faq_keyboard)
        )

    elif query.data in FAQS:
        query.answer()
        query.message.reply_text(FAQS[query.data])
    elif query.data == 'get_ref_link':
        query.answer()
        user_id = str(query.from_user.id)
        bot_username = context.bot.username
        ref_link = f"https://t.me/{bot_username}?start={user_id}"
        query.message.reply_text(
            f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π:\n\n{ref_link}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É! –ö–æ–≥–¥–∞ –æ–Ω –∑–∞–π–¥—ë—Ç ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å +10 –±–∞–ª–ª–æ–≤ –∏ +–ª–æ—è–ª—å–Ω–æ—Å—Ç—å üòâ"
        )

    elif query.data == 'back_main':
        query.message.delete()
        start(update, context)

def handle_message(update, context):
    if update.message:
        user = update.message.from_user
        text = update.message.text
        save_user(user.id)
        context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{text}"
        )
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø –æ—Ç–≤–µ—á—É —Ç–µ–±–µ –ª–∏—á–Ω–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
    else:
        return  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏

def save_user(user_id):
    user_id = str(user_id)
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            try:
                users = json.load(f)
            except Exception:
                users = {}
    else:
        users = {}

    if user_id not in users:
        users[user_id] = {"points": 0, "last_roll": "", "streak": 0, "referrals": []}

    with open(USERS_FILE, 'w') as f:
        json.dump(users, f)

def handle_dice(update, context):
    user_id = str(update.message.from_user.id)
    today = datetime.now().date()
    points_file = POINTS_FILE

    if os.path.exists(points_file):
        with open(points_file, 'r') as f:
            try:
                points_data = json.load(f)
            except Exception:
                points_data = {}
    else:
        points_data = {}

    if isinstance(points_data.get(user_id), int):
        points_data[user_id] = {"points": points_data[user_id], "last_roll": "", "streak": 0}

    user_info = points_data.get(user_id, {"points": 0, "last_roll": "", "streak": 0})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞ (–∏ –¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª)
    if user_info.get("last_roll"):
        last_roll_date = datetime.strptime(user_info["last_roll"], "%Y-%m-%d").date()
        delta_days = (today - last_roll_date).days
        if delta_days > 1:
            # –ü—Ä–æ–ø—É—Å–∫ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–Ω—è ‚Äî –¥–µ–ª–∏–º –±–∞–ª–ª—ã –ø–æ–ø–æ–ª–∞–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
            user_info["points"] = user_info["points"] // 2
            user_info["streak"] = 1
            update.message.reply_text("–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π ‚Äî —Ç–≤–æ–∏ –±–∞–ª–ª—ã —É–º–µ–Ω—å—à–µ–Ω—ã –≤ 2 —Ä–∞–∑–∞! –°–µ—Ä–∏—è –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å–±—Ä–æ—à–µ–Ω–∞.")
        elif delta_days == 1:
            user_info["streak"] += 1
        elif delta_days == 0:
            update.message.reply_text("–¢—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª –∫–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.")
            return
        else:
            # –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
            user_info["streak"] = 1
    else:
        user_info["streak"] = 1

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–∏
    dice_value = update.message.dice.value
    points = dice_value * 2
    user_info["points"] += points
    user_info["last_roll"] = today.isoformat()

    points_data[user_id] = user_info

    with open(points_file, 'w') as f:
        json.dump(points_data, f)

    update.message.reply_text(
        f"–í—ã–ø–∞–ª–æ: {dice_value}! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ üéâ\n"
        f"–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {user_info['points']}\n"
        f"–°–µ—Ä–∏—è –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: {user_info['streak']}"
    )

def my_progress(update, context):
    user_id = str(update.message.from_user.id)
    if os.path.exists(POINTS_FILE):
        with open(POINTS_FILE, 'r') as f:
            points_data = json.load(f)
    else:
        points_data = {}
    user_info = points_data.get(user_id, {"points": 0, "last_roll": "", "streak": 0})

    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äî —Ç—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫
    referrals_count = 0
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            users = json.load(f)
        user_full = users.get(user_id)
        if user_full and "referrals" in user_full:
            referrals_count = len(user_full["referrals"])

    text = (
        f"üîé *–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n"
        f"–ë–∞–ª–ª–æ–≤: {user_info.get('points', 0)}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫: {user_info.get('last_roll', '‚Äî')}\n"
        f"–°–µ—Ä–∏—è –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: {user_info.get('streak', 0)}\n"
        f"–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals_count}"
    )
    update.message.reply_text(text, parse_mode="Markdown")
def send_broadcast(update, context):
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.message.from_user.id != ADMIN_ID:
        update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args:
        update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/send –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return

    message = ' '.join(context.args)

    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            users = json.load(f)
    else:
        update.message.reply_text("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    count = 0
    for user_id in users:
        try:
            context.bot.send_message(chat_id=user_id, text=message)
            count += 1
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)

    update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
def show_top(update, context):
    if os.path.exists(POINTS_FILE):
        with open(POINTS_FILE, 'r') as f:
            points_data = json.load(f)
    else:
        points_data = {}

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∞–ª–ª–∞–º, –¢–û–ü 10
    top_users = sorted(points_data.items(), key=lambda x: x[1].get("points", 0), reverse=True)[:10]

    msg = "üèÜ –¢–æ–ø-10 –ø–æ –±–∞–ª–ª–∞–º:\n"
    for i, (user_id, info) in enumerate(top_users, 1):
        msg += f"{i}. {user_id}: {info.get('points', 0)} –±–∞–ª–ª–æ–≤\n"

    update.message.reply_text(msg)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & (~Filters.command), handle_booking))
    dp.add_handler(CommandHandler("myprogress", my_progress))
    dp.add_handler(CommandHandler("send", send_broadcast, pass_args=True))
    dp.add_handler(CommandHandler("top", show_top))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.dice, handle_dice))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã –≤ Telegram...')
    updater.start_polling()
    updater.idle()
def handle_booking(update, context):
    booking_steps = {
        1: ("name", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
        2: ("age", "–ö–∞–∫–æ–π —ç—Å–∫–∏–∑ —Ö–æ—á–µ—à—å? (–æ–ø–∏—à–∏ –∏–ª–∏ —Å–∫–∏–Ω—å —Å—Å—ã–ª–∫—É)"),
        3: ("sketch", "–ö–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø—Ä–∏–π—Ç–∏ –Ω–∞ —Å–µ–∞–Ω—Å?"),
        4: ("datetime", "–¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?"),
        5: ("phone", None)
    }

    step = context.user_data.get('booking_step', 0)
    if step == 0:
        return

    field, next_question = booking_steps[step]
    context.user_data['booking'][field] = update.message.text

    if next_question:
        context.user_data['booking_step'] += 1
        update.message.reply_text(next_question)
    else:
        booking_data = context.user_data['booking']
        booking_info = (
            f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ–∞–Ω—Å!*\n\n"
            f"–ò–º—è: {booking_data['name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {booking_data['age']}\n"
            f"–≠—Å–∫–∏–∑: {booking_data['sketch']}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {booking_data['datetime']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['phone']}\n"
        )

        with open("bookings.txt", "a", encoding="utf-8") as f:
            f.write(booking_info + "\n" + "-"*30 + "\n")

        context.bot.send_message(chat_id=ADMIN_ID, text=booking_info, parse_mode="Markdown")
        update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π.")
        context.user_data['booking_step'] = 0
        context.user_data['booking'] = {}
if __name__ == '__main__':
    
    main()
    input('–Ω–∞–∂–º–∏ Enter...')